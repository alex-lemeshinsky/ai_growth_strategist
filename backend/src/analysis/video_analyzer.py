"""
Video analysis prototype using Gemini vision capabilities.
Extracts hooks, CTAs, visual elements, on-screen text, and product showcase from video ads.
"""
import os
import json
from typing import Dict, Any, Optional
from pathlib import Path

from dotenv import load_dotenv
import google.generativeai as genai

load_dotenv()
DEFAULT_MODEL = os.environ.get("GEMINI_MODEL", "models/gemini-2.0-flash")


def _ensure_api_key():
    api_key = os.environ.get("GOOGLE_API_KEY")
    if not api_key:
        raise RuntimeError("GOOGLE_API_KEY is not set. Please export your Google AI Studio API key.")
    genai.configure(api_key=api_key)


def analyze_video_file(
    video_path: str,
    meta: Optional[Dict[str, Any]] = None,
    model_name: Optional[str] = None,
) -> Dict[str, Any]:
    """
    Analyze a video file using Gemini vision model.
    
    Args:
        video_path: Path to the cached video file
        meta: Optional metadata about the creative (page_name, platforms, etc.)
        model_name: Gemini model to use (default: gemini-1.5-flash)
    
    Returns:
        Dictionary with structured analysis
    """
    _ensure_api_key()
    
    if not os.path.exists(video_path):
        raise FileNotFoundError(f"Video file not found: {video_path}")
    
    # Upload video to Gemini
    print(f"üì§ Uploading video: {Path(video_path).name}")
    video_file = genai.upload_file(path=video_path)
    print(f"‚úÖ Uploaded as: {video_file.name}")
    
    # Wait for file to become active
    import time
    print("‚è≥ Waiting for file to be processed...")
    while video_file.state.name == "PROCESSING":
        time.sleep(2)
        video_file = genai.get_file(video_file.name)
    
    if video_file.state.name != "ACTIVE":
        raise RuntimeError(f"File processing failed: {video_file.state.name}")
    print("‚úÖ File is ready")
    
    # Try to use specified model, fallback to working alternatives
    model_to_use = model_name or DEFAULT_MODEL
    
    # Ensure model name has correct prefix
    if not model_to_use.startswith("models/"):
        model_to_use = f"models/{model_to_use}"
    
    try:
        model = genai.GenerativeModel(model_to_use)
    except Exception as e:
        print(f"‚ö†Ô∏è  Model {model_to_use} not available, trying models/gemini-2.0-flash...")
        try:
            model = genai.GenerativeModel("models/gemini-2.0-flash")
        except Exception:
            print("‚ö†Ô∏è  Trying models/gemini-2.0-pro-exp...")
            model = genai.GenerativeModel("models/gemini-2.0-pro-exp")
    
    # Build context
    context = ""
    if meta:
        context = f"\n–ú–µ—Ç–∞–¥–∞–Ω—ñ –∫—Ä–µ–∞—Ç–∏–≤—É:\n{json.dumps(meta, ensure_ascii=False, indent=2)}\n"
    
    # Prompt for video analysis (Ukrainian) - Performance Marketing oriented
    prompt = f"""–†–æ–ª—å: –¢–∏ ‚Äî –µ–∫—Å–ø–µ—Ä—Ç–Ω–∏–π Performance Marketing Creative Strategist. –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—Å–∞—Ç–∏ –≤—ñ–¥–µ–æ, –∞ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –π–æ–≥–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å, –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω—ñ —Ç—Ä–∏–≥–µ—Ä–∏ —Ç–∞ –Ω–∞–¥–∞—Ç–∏ –¥—ñ—î–≤—ñ –≥—ñ–ø–æ—Ç–µ–∑–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è.

–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü–µ–π –≤—ñ–¥–µ–æ–∫—Ä–µ–∞—Ç–∏–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞, —Å–ø–∏—Ä–∞—é—á–∏—Å—å –Ω–∞ –Ω–∞–¥–∞–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.

1. –ö–æ–Ω—Ç–µ–∫—Å—Ç:
{context}

2. –ó–∞–≤–¥–∞–Ω–Ω—è –ê–Ω–∞–ª—ñ–∑—É:

–ü—Ä–æ–≤–µ–¥–∏ –≥–ª–∏–±–æ–∫–∏–π –∞–Ω–∞–ª—ñ–∑ –∑–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é —Ç–∞ –Ω–∞–¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤–∏–∫–ª—é—á–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON.

Hook (0-3 —Å–µ–∫—É–Ω–¥–∏): –í–∏–∑–Ω–∞—á –æ—Å–Ω–æ–≤–Ω–∏–π –≥–∞—á–æ–∫. –Ø–∫–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–∏–π –ø—Ä–∏–Ω—Ü–∏–ø –≤—ñ–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î (–Ω–∞–ø—Ä., Curiosity Gap, Social Proof, Loss Aversion, Shock)? –ù–∞—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–π –¥–ª—è –¶–ê?

–í—ñ–∑—É–∞–ª—å–Ω–∏–π –°—Ç–∏–ª—å —Ç–∞ –î–∏–Ω–∞–º—ñ–∫–∞: –û—Ü—ñ–Ω–∏ —Å—Ç–∏–ª—å, –µ—Ñ–µ–∫—Ç–∏ —Ç–∞ –∫–æ–ª—å–æ—Ä–æ–≤—É –≥–∞–º—É. –Ø–∫–∏–π —Ç–µ–º–ø —É –≤—ñ–¥–µ–æ (–ø–æ–≤—ñ–ª—å–Ω–∏–π, —à–≤–∏–¥–∫–∏–π, –∑–º—ñ—à–∞–Ω–∏–π)? –Ø–∫ —Ü–µ –≤–ø–ª–∏–≤–∞—î –Ω–∞ —Å–ø—Ä–∏–π–Ω—è—Ç—Ç—è?

–¢–µ–∫—Å—Ç –Ω–∞ –µ–∫—Ä–∞–Ω—ñ (OCR): –†–æ–∑–ø—ñ–∑–Ω–∞–π —Ç–∞ –≤–∏–ø–∏—à–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∑ –µ–∫—Ä–∞–Ω—É –∑ —Ç–∞–π–º–∫–æ–¥–∞–º–∏.

–ü–æ–∫–∞–∑ –ü—Ä–æ–¥—É–∫—Ç—É/–¶—ñ–Ω–Ω–æ—Å—Ç—ñ: –Ø–∫ –ø—Ä–æ–¥—É–∫—Ç —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–π —É —Å—é–∂–µ—Ç? –ß–∏ –ø–æ–∫–∞–∑—É—é—Ç—å –ª–∏—à–µ —Ñ—ñ—á—ñ, —á–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä—É—é—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç/—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞?

CTA (Call-to-Action): –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –∑–∞–∫–ª–∏–∫ –¥–æ –¥—ñ—ó. –ß–∏ —î –≤ –Ω—å–æ–º—É —Ç–µ—Ä–º—ñ–Ω–æ–≤—ñ—Å—Ç—å, –æ–±–º–µ–∂–µ–Ω–Ω—è –∞–±–æ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∏–º—É–ª (incentive)?

–ö–ª—é—á–æ–≤–µ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (Messaging): –Ø–∫—ñ –±–æ–ª—ñ –¶–ê –∑–∞—á—ñ–ø–∞—é—Ç—å—Å—è —ñ —è–∫—ñ —Ü—ñ–Ω–Ω—ñ—Å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó (value props) –ø—Ä–æ–ø–æ–Ω—É—é—Ç—å—Å—è —è–∫ —Ä—ñ—à–µ–Ω–Ω—è? –Ø–∫ –≤–æ–Ω–∏ —Å—Ñ–æ—Ä–º—É–ª—å–æ–≤–∞–Ω—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —á–µ—Ä–µ–∑ —Å—Ç–æ—Ä—ñ—Ç–µ–ª—ñ–Ω–≥, –ø—Ä—è–º–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è, –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—é "–¥–æ/–ø—ñ—Å–ª—è")?

–ê—É–¥—ñ–æ: –û—Ü—ñ–Ω–∏ –º—É–∑–∏–∫—É, –≥–æ–ª–æ—Å —Ç–∞ –∑–≤—É–∫–æ–≤—ñ –µ—Ñ–µ–∫—Ç–∏. –ß–∏ –¥–æ–ø–æ–≤–Ω—é—é—Ç—å –≤–æ–Ω–∏ –≤—ñ–∑—É–∞–ª—å–Ω–∏–π —Ä—è–¥ —ñ –ø—ñ–¥—Å–∏–ª—é—é—Ç—å –µ–º–æ—Ü—ñ—ó?

–ù–∞—Ä–∞—Ç–∏–≤ —Ç–∞ –ï–º–æ—Ü—ñ–π–Ω–∏–π –®–ª—è—Ö: –†–æ–∑–±–∏–π –≤—ñ–¥–µ–æ –Ω–∞ –∫–ª—é—á–æ–≤—ñ —Å—Ü–µ–Ω–∏. –Ø–∫—É –µ–º–æ—Ü—ñ–π–Ω—É –ø–æ–¥–æ—Ä–æ–∂ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≥–ª—è–¥–∞—á (–Ω–∞–ø—Ä., –≤—ñ–¥ —ñ–Ω—Ç—Ä–∏–≥–∏ -> –¥–æ –ø—Ä–æ–±–ª–µ–º–∏ -> –¥–æ —Ä—ñ—à–µ–Ω–Ω—è -> –¥–æ –±–∞–∂–∞–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É)?

–ö–∞—Ä—Ç–∞ –°–∏–ª—å–Ω–∏—Ö —Ç–∞ –°–ª–∞–±–∫–∏—Ö –°—Ç–æ—Ä—ñ–Ω: –û—Ü—ñ–Ω–∏ –∫–ª—é—á–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑–∞ —à–∫–∞–ª–æ—é –≤—ñ–¥ 0 –¥–æ 1, –¥–µ 1 ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å.

–ö–ª—é—á–æ–≤—ñ –í–∏—Å–Ω–æ–≤–∫–∏ —Ç–∞ –ì—ñ–ø–æ—Ç–µ–∑–∏: –°—Ñ–æ—Ä–º—É–ª—é–π –≥–æ–ª–æ–≤–Ω—É —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é –∫—Ä–µ–∞—Ç–∏–≤—É, –∫–ª—é—á–æ–≤—ñ —ñ–Ω—Å–∞–π—Ç–∏ —Ç–∞ 2-3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –≥—ñ–ø–æ—Ç–µ–∑–∏, —è–∫—ñ –º–∏ –º–æ–∂–µ–º–æ –ø—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ —É –Ω–∞—à–∏—Ö –≤–ª–∞—Å–Ω–∏—Ö –∫—Ä–µ–∞—Ç–∏–≤–∞—Ö.

–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤–∏–∫–ª—é—á–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON:
{{
  "hook": {{
    "time_start_s": 0.0,
    "time_end_s": 3.0,
    "description": "–¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –≥–∞—á–∫–∞",
    "psychological_principle": "Curiosity Gap / Social Proof / Loss Aversion / Shock / —ñ–Ω—à–µ",
    "relevance_to_audience": "–æ—Ü—ñ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—ñ –¥–ª—è –¶–ê",
    "strength": 0.8
  }},
  "visual_style": {{
    "style": "UGC/screencast/motion graphics/real footage/—ñ–Ω—à–µ",
    "effects": ["jump cuts", "zooms", "transitions", "filters"],
    "color_palette": "–æ–ø–∏—Å –∫–æ–ª—å–æ—Ä–æ–≤–æ—ó –≥–∞–º–∏",
    "pacing": "slow/fast/mixed",
    "pacing_impact": "—è–∫ —Ç–µ–º–ø –≤–ø–ª–∏–≤–∞—î –Ω–∞ —Å–ø—Ä–∏–π–Ω—è—Ç—Ç—è",
    "has_captions": true/false,
    "caption_style": "–æ–ø–∏—Å —Å—Ç–∏–ª—é —Å—É–±—Ç–∏—Ç—Ä—ñ–≤"
  }},
  "on_screen_text": [
    {{"timecode_s": 1.5, "text": "—Ç–µ–∫—Å—Ç –Ω–∞ –µ–∫—Ä–∞–Ω—ñ"}}
  ],
  "product_showcase": {{
    "type": "UI demo/Real product/Transformation/Result-focused/Feature-focused",
    "integration_quality": "–Ω–∞—Å–∫—ñ–ª—å–∫–∏ –ø—Ä–∏—Ä–æ–¥–Ω—å–æ —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç",
    "shows_transformation": true/false,
    "timecodes_s": [2.0, 5.5, 10.0],
    "key_features": ["feature1", "feature2"],
    "clarity_score": 0.7
  }},
  "cta": [
    {{
      "timecode_s": 12.0,
      "text": "—Ç–æ—á–Ω–∏–π —Ç–µ–∫—Å—Ç CTA",
      "channel": "on-screen/voice/both",
      "has_urgency": true/false,
      "has_incentive": true/false,
      "incentive_description": "–æ–ø–∏—Å —Å—Ç–∏–º—É–ª—É, —è–∫—â–æ —î",
      "strength": 0.9
    }}
  ],
  "messaging": {{
    "pains": [
      {{"text": "–±—ñ–ª—å –¶–ê", "timecode_s": 1.0, "presentation_style": "storytelling/direct/visual"}}
    ],
    "value_props": [
      {{"text": "—Ü—ñ–Ω–Ω—ñ—Å–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è", "timecode_s": 3.5, "presentation_style": "before-after/testimonial/demonstration"}}
    ],
    "messaging_approach": "storytelling/direct address/problem-solution/before-after"
  }},
  "audio": {{
    "has_voiceover": true/false,
    "voiceover_tone": "–æ–ø–∏—Å —Ç–æ–Ω—É –≥–æ–ª–æ—Å—É",
    "music_mood": "energetic/calm/dramatic/uplifting/none",
    "sound_effects": true/false,
    "audio_visual_alignment": "—è–∫ –∞—É–¥—ñ–æ –¥–æ–ø–æ–≤–Ω—é—î –≤—ñ–∑—É–∞–ª—å–Ω–∏–π —Ä—è–¥"
  }},
  "emotional_journey": [
    {{
      "scene": 1,
      "time_start_s": 0.0,
      "time_end_s": 3.0,
      "what_we_see": "–æ–ø–∏—Å –≤—ñ–∑—É–∞–ª—É",
      "what_we_hear": "–æ–ø–∏—Å –∞—É–¥—ñ–æ",
      "emotional_state": "intrigue/problem/solution/desire/action",
      "viewer_emotion": "—è–∫—É –µ–º–æ—Ü—ñ—é –≤—ñ–¥—á—É–≤–∞—î –≥–ª—è–¥–∞—á"
    }}
  ],
  "scores": {{
    "hook_strength": 0.8,
    "cta_clarity": 0.9,
    "product_visibility": 0.7,
    "message_density": 0.6,
    "execution_quality": 0.8,
    "emotional_impact": 0.7,
    "relevance_to_audience": 0.8
  }},
  "key_insights": {{
    "main_strategy": "–≥–æ–ª–æ–≤–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è –∫—Ä–µ–∞—Ç–∏–≤—É –≤ 1-2 —Ä–µ—á–µ–Ω–Ω—è—Ö",
    "key_insights": [
      "—ñ–Ω—Å–∞–π—Ç 1: —â–æ —Ä–æ–±–∏—Ç—å —Ü–µ–π –∫—Ä–µ–∞—Ç–∏–≤ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–º",
      "—ñ–Ω—Å–∞–π—Ç 2: –∫–ª—é—á–æ–≤–∞ —Ç–∞–∫—Ç–∏–∫–∞ –∞–±–æ –ø—ñ–¥—Ö—ñ–¥",
      "—ñ–Ω—Å–∞–π—Ç 3: —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç"
    ],
    "hypotheses_to_test": [
      "–ì—ñ–ø–æ—Ç–µ–∑–∞ 1: –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ —ñ–¥–µ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤ –Ω–∞—à–∏—Ö –∫—Ä–µ–∞—Ç–∏–≤–∞—Ö",
      "–ì—ñ–ø–æ—Ç–µ–∑–∞ 2: –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É",
      "–ì—ñ–ø–æ—Ç–µ–∑–∞ 3: –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è A/B —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"
    ]
  }},
  "summary": "–∫–æ—Ä–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ –∞–Ω–∞–ª—ñ–∑—É –≤ 2-3 —Ä–µ—á–µ–Ω–Ω—è—Ö –∑ —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—ñ"
}}

–ù–µ –≤–∏–≥–∞–¥—É–π: —è–∫—â–æ —á–æ–≥–æ—Å—å –Ω–µ –≤–∏–¥–Ω–æ –∞–±–æ –Ω–µ —á—É—Ç–∏ ‚Äî –ø–∏—à–∏ null –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤."""

    # Generate analysis
    print("ü§ñ –ê–Ω–∞–ª—ñ–∑—É—é –≤—ñ–¥–µ–æ –∑ Gemini...")
    response = model.generate_content(
        [video_file, prompt],
        generation_config={
            "temperature": 0.3,
            "response_mime_type": "application/json",
        }
    )
    
    # Parse JSON response
    try:
        result = json.loads(response.text)
        print("‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return result
    except json.JSONDecodeError as e:
        print(f"‚ö†Ô∏è  JSON parse error: {e}")
        # Try to extract JSON from response
        import re
        m = re.search(r"\{[\s\S]*\}", response.text)
        if m:
            return json.loads(m.group(0))
        # Fallback
        return {
            "error": "Failed to parse JSON",
            "raw_response": response.text[:500]
        }


def analyze_video_prototype(video_path: str, output_path: Optional[str] = None) -> Dict[str, Any]:
    """
    Simple wrapper for prototype testing.
    
    Args:
        video_path: Path to video file
        output_path: Optional path to save JSON result
    
    Returns:
        Analysis dictionary
    """
    result = analyze_video_file(video_path)
    
    if output_path:
        with open(output_path, "w", encoding="utf-8") as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        print(f"üíæ Saved to: {output_path}")
    
    return result


if __name__ == "__main__":
    import sys
    if len(sys.argv) < 2:
        print("Usage: python -m src.analysis.video_analyzer <video_path> [output_json]")
        sys.exit(1)
    
    video_path = sys.argv[1]
    output_path = sys.argv[2] if len(sys.argv) > 2 else None
    
    result = analyze_video_prototype(video_path, output_path)
    print(json.dumps(result, ensure_ascii=False, indent=2))
