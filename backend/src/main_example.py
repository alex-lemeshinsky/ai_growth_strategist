#!/usr/bin/env python3
"""
Example script demonstrating Facebook Ads Library functionality.
Shows how to use the clean architecture implementation to search for competitor ads.
"""

import asyncio
from config.container import container
from domain.models import AdActiveStatus
from domain.exceptions import FacebookDomainError, InvalidSearchQueryError


async def print_ad_details(ad, index: int):
    """Print detailed information about a single ad"""
    print(f"\n{'=' * 80}")
    print(f"üì¢ –†–µ–∫–ª–∞–º–∞ #{index}")
    print(f"{'=' * 80}")
    
    print(f"\nüë§ –°—Ç–æ—Ä—ñ–Ω–∫–∞: {ad.page_name or 'N/A'}")
    print(f"üÜî ID: {ad.id}")
    
    # Primary text
    if ad.primary_text:
        text_preview = ad.primary_text[:200] + ('...' if len(ad.primary_text) > 200 else '')
        print(f"\nüìù –¢–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–∏:\n   {text_preview}")
    
    # Title
    if ad.primary_title:
        print(f"\nüìå –ó–∞–≥–æ–ª–æ–≤–æ–∫: {ad.primary_title}")
    
    # Description
    if ad.primary_description:
        desc_preview = ad.primary_description[:100] + ('...' if len(ad.primary_description) > 100 else '')
        print(f"üìÑ –û–ø–∏—Å: {desc_preview}")
    
    # Platforms
    if ad.publisher_platforms:
        print(f"\nüéØ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∏: {ad.formatted_platforms}")
    
    # Dates
    if ad.ad_delivery_start_time:
        print(f"üóìÔ∏è  –ó–∞–ø—É—â–µ–Ω–∞: {ad.ad_delivery_start_time}")
    
    if ad.ad_delivery_stop_time:
        print(f"üõë –ó—É–ø–∏–Ω–µ–Ω–∞: {ad.ad_delivery_stop_time}")
    else:
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {'–ê–ö–¢–ò–í–ù–ê' if ad.is_active else '–ù–ï–ê–ö–¢–ò–í–ù–ê'}")
    
    # Metrics
    if ad.impressions:
        print(f"\nüìä –ü–æ–∫–∞–∑–∏: {ad.impressions.formatted}")
    
    if ad.spend and ad.currency:
        print(f"üí∞ –í–∏—Ç—Ä–∞—Ç–∏: {ad.spend.formatted} {ad.currency}")
    
    # Snapshot URL
    if ad.ad_snapshot_url:
        print(f"\nüîó –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫—Ä–µ–∞—Ç–∏–≤: {ad.ad_snapshot_url}")


async def search_single_keyword():
    """Example: Search for ads with a single keyword"""
    print("\n" + "="*80)
    print("üîç –ü–û–®–£–ö –ó–ê –û–î–ù–ò–ú –ö–õ–Æ–ß–û–í–ò–ú –°–õ–û–í–û–ú")
    print("="*80)
    
    search_service = container.get_ads_search_service()
    
    keyword = input("\nüîç –í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ (–∞–±–æ Enter –¥–ª—è 'fitness app'): ").strip()
    if not keyword:
        keyword = "fitness app"
    
    country = input("üåç –ö–æ–¥ –∫—Ä–∞—ó–Ω–∏ (–∞–±–æ Enter –¥–ª—è 'US'): ").strip().upper()
    if not country:
        country = "US"
    
    try:
        result = await search_service.search_ads(
            search_terms=keyword,
            country=country,
            limit=10,
            active_status=AdActiveStatus.ALL
        )
        
        print(f"\n‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(result.ads)} —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å:")
        
        for index, ad in enumerate(result.ads, 1):
            await print_ad_details(ad, index)
        
        # Show summary
        summary = search_service.get_ads_summary(result)
        print(f"\nüìä –ü–Ü–î–°–£–ú–û–ö:")
        print(f"   –í—Å—å–æ–≥–æ —Ä–µ–∫–ª–∞–º: {summary['total_ads']}")
        print(f"   –ê–∫—Ç–∏–≤–Ω–∏—Ö: {summary['active_ads']}")
        print(f"   –ü–ª–∞—Ç—Ñ–æ—Ä–º–∏: {summary['platforms']}")
        print(f"   –¢–æ–ø —Å—Ç–æ—Ä—ñ–Ω–∫–∏: {summary['top_pages']}")
        print(f"   –Ñ —â–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∏: {summary['has_more_pages']}")
        
    except InvalidSearchQueryError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {e}")
    except FacebookDomainError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Facebook API: {e}")


async def search_competitor_analysis():
    """Example: Competitor analysis with multiple keywords"""
    print("\n" + "="*80)
    print("üè¢ –ê–ù–ê–õ–Ü–ó –ö–û–ù–ö–£–†–ï–ù–¢–Ü–í")
    print("="*80)
    
    search_service = container.get_ads_search_service()
    
    # Example competitor keywords
    competitor_keywords = [
        "fitness tracker",
        "workout app", 
        "health monitoring",
        "exercise planner"
    ]
    
    print(f"\nüéØ –®—É–∫–∞—î–º–æ —Ä–µ–∫–ª–∞–º—É –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏: {', '.join(competitor_keywords)}")
    
    try:
        results = await search_service.get_competitor_ads(
            competitor_keywords=competitor_keywords,
            country="US",
            limit_per_keyword=5
        )
        
        for i, (keyword, result) in enumerate(zip(competitor_keywords, results), 1):
            print(f"\n{'='*60}")
            print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è '{keyword}': {len(result.ads)} —Ä–µ–∫–ª–∞–º")
            print(f"{'='*60}")
            
            for j, ad in enumerate(result.ads[:3], 1):  # Show only first 3
                print(f"\nüì¢ #{j} {ad.page_name or '–ù–µ–≤—ñ–¥–æ–º–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞'}")
                if ad.primary_title:
                    print(f"   üìå {ad.primary_title}")
                if ad.publisher_platforms:
                    print(f"   üéØ {ad.formatted_platforms}")
        
    except FacebookDomainError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")


async def search_by_page():
    """Example: Search ads from a specific Facebook page"""
    print("\n" + "="*80)
    print("üìÑ –ü–û–®–£–ö –ó–ê –ù–ê–ó–í–û–Æ –°–¢–û–†–Ü–ù–ö–ò")
    print("="*80)
    
    search_service = container.get_ads_search_service()
    
    page_name = input("\nüìÑ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É Facebook —Å—Ç–æ—Ä—ñ–Ω–∫–∏: ").strip()
    if not page_name:
        print("‚ùå –ù–∞–∑–≤–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—É—Å—Ç–æ—é")
        return
    
    try:
        result = await search_service.search_by_page_name(
            page_name=page_name,
            country="US",
            limit=10
        )
        
        if result.ads:
            print(f"\n‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(result.ads)} —Ä–µ–∫–ª–∞–º –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ '{page_name}':")
            
            for index, ad in enumerate(result.ads, 1):
                await print_ad_details(ad, index)
        else:
            print(f"üòï –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∫–ª–∞–º –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ '{page_name}'")
        
    except FacebookDomainError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")


async def platform_filtering_demo():
    """Example: Filtering ads by platform"""
    print("\n" + "="*80)
    print("üéØ –§–Ü–õ–¨–¢–†–ê–¶–Ü–Ø –ó–ê –ü–õ–ê–¢–§–û–†–ú–ê–ú–ò")
    print("="*80)
    
    search_service = container.get_ads_search_service()
    
    try:
        # Search for some ads first
        result = await search_service.search_ads("mobile app", limit=10)
        
        if not result.ads:
            print("üòï –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∫–ª–∞–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó")
            return
        
        print(f"\nüìä –í—Å—å–æ–≥–æ –∑–Ω–∞–π–¥–µ–Ω–æ {len(result.ads)} —Ä–µ–∫–ª–∞–º")
        
        # Filter by Instagram only
        instagram_ads = search_service.filter_ads_by_platform(result.ads, ['instagram'])
        print(f"üì∑ Instagram —Ç—ñ–ª—å–∫–∏: {len(instagram_ads)} —Ä–µ–∫–ª–∞–º")
        
        # Filter by Facebook only
        facebook_ads = search_service.filter_ads_by_platform(result.ads, ['facebook'])
        print(f"üìò Facebook —Ç—ñ–ª—å–∫–∏: {len(facebook_ads)} —Ä–µ–∫–ª–∞–º")
        
        # Filter by both
        both_platforms = search_service.filter_ads_by_platform(result.ads, ['facebook', 'instagram'])
        print(f"üìòüì∑ Facebook –∞–±–æ Instagram: {len(both_platforms)} —Ä–µ–∫–ª–∞–º")
        
    except FacebookDomainError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")


async def main_menu():
    """Main interactive menu"""
    print("\nüöÄ Facebook Ads Library - –ß–∏—Å—Ç–∞ –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞")
    print("=" * 80)
    
    while True:
        print("\nüìã –ú–ï–ù–Æ:")
        print("1. üîç –ü–æ—à—É–∫ –∑–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º")
        print("2. üè¢ –ê–Ω–∞–ª—ñ–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤")
        print("3. üìÑ –ü–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é —Å—Ç–æ—Ä—ñ–Ω–∫–∏")
        print("4. üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ø–ª–∞—Ç—Ñ–æ—Ä–º")
        print("5. üö™ –í–∏—Ö—ñ–¥")
        
        choice = input("\n–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (1-5): ").strip()
        
        try:
            if choice == "1":
                await search_single_keyword()
            elif choice == "2":
                await search_competitor_analysis()
            elif choice == "3":
                await search_by_page()
            elif choice == "4":
                await platform_filtering_demo()
            elif choice == "5":
                print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                break
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        
        except KeyboardInterrupt:
            print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–∞ –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
            break
        except Exception as e:
            print(f"\n‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")


async def main():
    """Main entry point"""
    try:
        # Initialize dependency injection container
        container.initialize()
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
        
        # Test configuration
        config = container.get_config_service()
        try:
            config.get_facebook_app_id()
            config.get_facebook_app_secret()
            print("‚úÖ Facebook API –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–Ω–∞–π–¥–µ–Ω–∞")
        except FacebookDomainError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
            print("üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ FB_APP_ID —ñ FB_APP_SECRET –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –≤ .env —Ñ–∞–π–ª—ñ")
            return
        
        # Run main menu
        await main_menu()
        
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        # Cleanup
        await container.close()
        print("üßπ –†–µ—Å—É—Ä—Å–∏ –æ—á–∏—â–µ–Ω—ñ")


if __name__ == "__main__":
    asyncio.run(main())