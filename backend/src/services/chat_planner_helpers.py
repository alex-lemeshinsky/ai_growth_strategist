"""
Helper functions for chat planner: policy hints, fallbacks, etc.
"""
import logging
from typing import Dict, Any, List, Optional

logger = logging.getLogger(__name__)

# Policy risk keywords for hints
POLICY_RISK_KEYWORDS = {
    "health_claims": {
        "keywords": ["–ª—ñ–∫—É—î", "–≤–∏–ª—ñ–∫–æ–≤—É—î", "–≥–∞—Ä–∞–Ω—Ç—É—î –∑–¥–æ—Ä–æ–≤'—è", "cure", "heal", "–ª–µ—á–∏—Ç"],
        "hint": "üí° –£–≤–∞–≥–∞: —É–Ω–∏–∫–∞–π –º–µ–¥–∏—á–Ω–∏—Ö claims –±–µ–∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—å (—Ä–∏–∑–∏–∫ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ü—ñ—î—é)"
    },
    "before_after": {
        "keywords": ["–¥–æ —ñ –ø—ñ—Å–ª—è", "before after", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞", "–≤—Ç—Ä–∞—Ç–∏–≤", "—Å—Ö—É–¥–Ω—É–≤"],
        "hint": "üí° –ü—ñ–¥–∫–∞–∑–∫–∞: before/after –≤–∏–º–∞–≥–∞—î disclaimers –∞–±–æ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ"
    },
    "guarantees": {
        "keywords": ["100% –≥–∞—Ä–∞–Ω—Ç—ñ—è", "–æ–±—ñ—Ü—è—î–º–æ", "—Ç–æ—á–Ω–æ –æ—Ç—Ä–∏–º–∞—î—à", "guarantee", "promised"],
        "hint": "üí° –ü—ñ–¥–∫–∞–∑–∫–∞: –∞–±—Å–æ–ª—é—Ç–Ω—ñ –≥–∞—Ä–∞–Ω—Ç—ñ—ó —á–∞—Å—Ç–æ –±–ª–æ–∫—É—é—Ç—å—Å—è –º–æ–¥–µ—Ä–∞—Ü—ñ—î—é"
    },
    "music_rights": {
        "keywords": ["–ø–æ–ø—É–ª—è—Ä–Ω–∞ –º—É–∑–∏–∫–∞", "—Ö—ñ—Ç", "–ø—ñ—Å–Ω—è", "music", "song", "track"],
        "hint": "üí° –ü—ñ–¥–∫–∞–∑–∫–∞: –¥–ª—è –º—É–∑–∏–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ª—ñ—Ü–µ–Ω–∑—ñ—ó –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π royalty-free"
    },
    "celebrities": {
        "keywords": ["–∑–Ω–∞–º–µ–Ω–∏—Ç—ñ—Å—Ç—å", "–∑—ñ—Ä–∫–∞", "celebrity", "famous person", "—Å–µ–ª–µ–±—Ä—ñ—Ç—ñ"],
        "hint": "üí° –ü—ñ–¥–∫–∞–∑–∫–∞: –¥–ª—è –∑—ñ—Ä–æ–∫ –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–æ–∑–≤—ñ–ª, –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ UGC"
    },
    "alcohol_tobacco": {
        "keywords": ["–∞–ª–∫–æ–≥–æ–ª—å", "—Å–∏–≥–∞—Ä–µ—Ç–∏", "—Ç—é—Ç—é–Ω", "alcohol", "cigarette", "tobacco"],
        "hint": "‚ö†Ô∏è –£–≤–∞–≥–∞: –∞–ª–∫–æ–≥–æ–ª—å/—Ç—é—Ç—é–Ω –º–∞—é—Ç—å –∂–æ—Ä—Å—Ç–∫—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ —Ä–µ–∫–ª–∞–º—É"
    }
}


def detect_policy_risks(text: str, known_fields: Dict[str, Any]) -> List[Dict[str, str]]:
    """
    Detect potential policy risks in user input.

    Args:
        text: User message or known field values
        known_fields: Current brief state

    Returns:
        List of detected risks with hints
    """
    risks = []

    # Safe text handling
    text_lower = text.lower() if text else ""

    # Check product_offer for risks
    product = known_fields.get("product_offer") or ""
    product_lower = product.lower() if isinstance(product, str) else ""

    combined_text = f"{text_lower} {product_lower}"

    for risk_type, config in POLICY_RISK_KEYWORDS.items():
        for keyword in config["keywords"]:
            if keyword in combined_text:
                risks.append({
                    "type": risk_type,
                    "hint": config["hint"],
                    "detected_keyword": keyword
                })
                break  # Only add once per risk type

    return risks


def add_policy_hints_to_response(result: Dict[str, Any], user_message: str, known_fields: Dict[str, Any]) -> Dict[str, Any]:
    """
    Add policy hints to LLM response if risks detected.

    Args:
        result: LLM response dict
        user_message: User's latest message
        known_fields: Current brief state

    Returns:
        Modified result with policy_hints if applicable
    """
    risks = detect_policy_risks(user_message, known_fields)

    if risks:
        # Add hints to response
        if "policy_hints" not in result:
            result["policy_hints"] = []

        for risk in risks:
            if risk["hint"] not in [h.get("text") for h in result.get("policy_hints", [])]:
                result["policy_hints"].append({
                    "text": risk["hint"],
                    "type": risk["type"]
                })

        logger.info(f"üö® Policy risks detected: {[r['type'] for r in risks]}")

    return result


def generate_enhanced_final_prompt(brief: Dict[str, Any], creative_spec: Optional[Dict[str, Any]] = None) -> str:
    """
    Generate enhanced final prompt with creative spec.

    Args:
        brief: Complete brief fields
        creative_spec: Optional creative specification

    Returns:
        Detailed generation prompt
    """
    platform = brief.get("platform", "instagram")
    format_type = brief.get("format", "reels")
    duration = brief.get("duration_s", 15)
    product = brief.get("product_offer", "–ø—Ä–æ–¥—É–∫—Ç")
    audience = brief.get("audience", "—Ü—ñ–ª—å–æ–≤–∞ –∞—É–¥–∏—Ç–æ—Ä—ñ—è")
    objective = brief.get("objective", "install")
    cta = brief.get("cta", "–î—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ")

    hook = brief.get("hook", "–ü—Ä–∏–≤–µ—Ä—Ç–∞—é—á–∏–π —É–≤–∞–≥—É —Ö—É–∫")
    structure = brief.get("structure", "hook-body-cta")
    style = brief.get("style", "UGC")

    prompt = f"""–°—Ç–≤–æ—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π {duration}—Å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä—Ñ–æ—Ä–º–∞–Ω—Å-–≤—ñ–¥–µ–æ –¥–ª—è {platform}/{format_type}.

üìã –ö–û–ù–¢–ï–ö–°–¢:
‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç/–û—Ñ—Ñ–µ—Ä: {product}
‚Ä¢ –ê—É–¥–∏—Ç–æ—Ä—ñ—è: {audience}
‚Ä¢ –ú–µ—Ç–∞ –∫–∞–º–ø–∞–Ω—ñ—ó: {objective}
‚Ä¢ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration}—Å
‚Ä¢ CTA: {cta}

üé¨ –ö–†–ï–ê–¢–ò–í–ù–ê –ö–û–ù–¶–ï–ü–¶–Ü–Ø:
‚Ä¢ Hook: {hook}
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {structure}
‚Ä¢ –°—Ç–∏–ª—å: {style}
‚Ä¢ –§–æ—Ä–º–∞—Ç: –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–µ 9:16 –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö

üìù –ü–û–¢–†–Ü–ë–ù–û –°–¢–í–û–†–ò–¢–ò:
"""

    if creative_spec:
        # Detailed spec with creative_spec
        hook_spec = creative_spec.get("hook", {})
        prompt += f"""
1. HOOK (0-3—Å):
   ‚Ä¢ –¢–∏–ø: {hook_spec.get('type', 'problem-solution')}
   ‚Ä¢ –û–ø–∏—Å: {hook_spec.get('description', '–ü—Ä–∏–≤–µ—Ä—Ç–∞—é—á–∏–π —É–≤–∞–≥—É –ø–æ—á–∞—Ç–æ–∫')}

2. STRUCTURE ({structure}):
"""
        voiceover = creative_spec.get("voiceover", [])
        if voiceover:
            prompt += "   ‚Ä¢ Voiceover:\n"
            for i, line in enumerate(voiceover, 1):
                prompt += f"     {i}. {line}\n"

        on_screen_text = creative_spec.get("on_screen_text", [])
        if on_screen_text:
            prompt += "   ‚Ä¢ On-screen text:\n"
            for i, text in enumerate(on_screen_text, 1):
                prompt += f"     {i}. {text}\n"

        cta_spec = creative_spec.get("cta_spec", {})
        if cta_spec:
            prompt += f"""
3. CTA:
   ‚Ä¢ –¢–µ–∫—Å—Ç: {cta_spec.get('text', cta)}
   ‚Ä¢ –¢–∞–π–º—ñ–Ω–≥: {cta_spec.get('timestamp', duration-3)}—Å
   ‚Ä¢ Urgency: {cta_spec.get('urgency', 'medium')}
"""

        style_spec = creative_spec.get("style", {})
        if style_spec:
            prompt += f"""
4. PRODUCTION STYLE:
   ‚Ä¢ –¢–∏–ø: {style_spec.get('production', 'UGC')}
   ‚Ä¢ Pacing: {style_spec.get('pacing', 'dynamic')}
"""
    else:
        # Basic fallback
        prompt += f"""
1. SHOT LIST (3-4 —Å—Ü–µ–Ω–∏ –∑ —Ç–∞–π–º-–∫–æ–¥–∞–º–∏)
2. VOICEOVER (—Ç–µ–∫—Å—Ç –æ–∑–≤—É—á–∫–∏ –∑ —Ç–∞–π–º—ñ–Ω–≥–∞–º–∏)
3. ON-SCREEN TEXT (—Ç–µ–∫—Å—Ç –Ω–∞ –µ–∫—Ä–∞–Ω—ñ, –∫–æ–ª–∏ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏)
4. HOOK (0-3—Å): {hook}
5. CTA ({duration-3}-{duration}—Å): {cta}
"""

    prompt += f"""
üéØ –§–û–ö–£–° –ù–ê PERFORMANCE:
‚Ä¢ –®–≤–∏–¥–∫–∏–π —Ö—É–∫ (–ø–µ—Ä—à—ñ 3—Å –∫—Ä–∏—Ç–∏—á–Ω—ñ –¥–ª—è retention)
‚Ä¢ –ß—ñ—Ç–∫–∏–π value proposition
‚Ä¢ –°–∏–ª—å–Ω–∏–π CTA –∑ urgency
‚Ä¢ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø—ñ–¥ {platform} (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç, —Ç–µ–∫—Å—Ç —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π –Ω–∞ mobile)
"""

    return prompt
